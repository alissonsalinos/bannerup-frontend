[{"/Users/admin/Desktop/Development/GITLAB/login/client/src/index.js":"1","/Users/admin/Desktop/Development/GITLAB/login/client/src/App.js":"2","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/Home.js":"3","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/auth/Login.js":"4","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/auth/Register.js":"5","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/Header.js":"6","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/HeroBanner.js":"7","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/HomeList.js":"8","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/BreadCrump.js":"9","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/AppFooter.js":"10","/Users/admin/Desktop/Development/GITLAB/login/client/src/context/UserContext.js":"11","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/misc/ErrorNotice.js":"12","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/misc/SuccessNotice.js":"13","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/misc/Loading.js":"14","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/Edit.js":"15","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/EditForm.js":"16","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/Create.js":"17","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/NotActive.js":"18","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/NotActiveList.js":"19","/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/NewForm.js":"20"},{"size":143,"mtime":1609874418954,"results":"21","hashOfConfig":"22"},{"size":2004,"mtime":1611498967972,"results":"23","hashOfConfig":"22"},{"size":752,"mtime":1610139485384,"results":"24","hashOfConfig":"22"},{"size":4262,"mtime":1611432181169,"results":"25","hashOfConfig":"22"},{"size":6212,"mtime":1611432273689,"results":"26","hashOfConfig":"22"},{"size":3521,"mtime":1610313945125,"results":"27","hashOfConfig":"22"},{"size":896,"mtime":1609882789459,"results":"28","hashOfConfig":"22"},{"size":5607,"mtime":1611432656878,"results":"29","hashOfConfig":"22"},{"size":319,"mtime":1610188255287,"results":"30","hashOfConfig":"22"},{"size":1196,"mtime":1609883853252,"results":"31","hashOfConfig":"22"},{"size":73,"mtime":1609891374014,"results":"32","hashOfConfig":"22"},{"size":871,"mtime":1610231116234,"results":"33","hashOfConfig":"22"},{"size":873,"mtime":1610231106234,"results":"34","hashOfConfig":"22"},{"size":559,"mtime":1610231251679,"results":"35","hashOfConfig":"22"},{"size":917,"mtime":1610313735983,"results":"36","hashOfConfig":"22"},{"size":354,"mtime":1610147920250,"results":"37","hashOfConfig":"22"},{"size":751,"mtime":1610214013826,"results":"38","hashOfConfig":"22"},{"size":772,"mtime":1610149310322,"results":"39","hashOfConfig":"22"},{"size":6656,"mtime":1611432501580,"results":"40","hashOfConfig":"22"},{"size":18915,"mtime":1611432453301,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"1mpy00",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},"/Users/admin/Desktop/Development/GITLAB/login/client/src/index.js",[],["85","86"],"/Users/admin/Desktop/Development/GITLAB/login/client/src/App.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/Home.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/auth/Login.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/auth/Register.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/Header.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/HeroBanner.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/HomeList.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/BreadCrump.js",[],["87","88"],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/AppFooter.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/context/UserContext.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/misc/ErrorNotice.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/misc/SuccessNotice.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/misc/Loading.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/Edit.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/EditForm.js",["89","90","91","92","93","94","95","96","97","98"],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/Create.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/pages/NotActive.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/NotActiveList.js",[],"/Users/admin/Desktop/Development/GITLAB/login/client/src/components/layout/NewForm.js",["99","100","101","102","103"],"import React,  {useState, useContext, useEffect}  from 'react'\nimport Axios from \"axios\";\nimport 'rbx/index.css'\nimport BreadCrump from './BreadCrump'\nimport {useHistory} from 'react-router-dom';\nimport ErrorNotice from \"../misc/ErrorNotice\";\nimport SuccessNotice from \"../misc/SuccessNotice\";\nimport Loading from \"../misc/Loading\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport {Container, Notification } from 'rbx';\nimport UserContext from \"../../context/UserContext\";\n\nexport default function NewForm(props) {\n    \n    const history = useHistory();\n    const {userData} = useContext(UserContext);\n    let nomeUser = ''\n\n    if(!userData.user) {\n        nomeUser = ''\n    } else {\n        nomeUser = userData.user.displayName\n    }\n\n    \n\n    const [id, setId] = useState(0);\n    \n    const [title, setTitle] = useState();\n    const [pUsuarios, setPUsuarios] = useState(false);\n    const [pEmpresas, setPEmpresas] = useState(false);\n    const [pRedes, setPRedes] = useState(false);\n    const [pInst, setPInst] = useState(false);\n    const [app, setApp] = useState(false);\n    const [pBnnImgUrl, setPBnnImgUrl] = useState();\n    const [pBnnImgLink, setPBnnImgLink] = useState();\n    const [pBnnEmbedCode, setPBnnEmbedCode] = useState();\n    const [startDate, setStartDate] = useState();\n    const [endDate, setEndDate] = useState();\n    const [active, setActive] = useState();\n    const [userCreator, setUserCreator] = useState();\n    const [loadingBar, setLoadingBar] = useState(0);\n    const [error, setError] = useState();\n    const [success, setSuccess] = useState();\n    const [campaign, setCampaign] = useState();\n    const [userUpdater, setUserUpdater] = useState();\n    const [updateAt, setUpdateAt] = useState(0);\n    let campaignData\n    \n    setTimeout(() => {\n        setUserCreator(nomeUser)\n    }, 500);\n\n    \n        console.log('tenho id:', props.id)\n        const getCampaign = async () => {\n            if(props.id){\n                const headers = {\"x-auth-token\": localStorage.getItem(\"auth-token\") }\n                const oneCampaign = await Axios.get(`${process.env.REACT_APP_API_URL}/campaigns/getoneupdate/`+props.id, {headers : headers})\n                setCampaign(oneCampaign.data)\n                campaignData = oneCampaign.data\n                \n            }\n        }\n\n    const fillFields = (campaignData) => {\n        if(props.id){\n        let startDate = new Date(campaignData.startDate).toISOString().substring(0, 10);\n        document.querySelector(\"#startDate\").value = startDate;\n        setStartDate(startDate);\n        let endDate = new Date(campaignData.endDate).toISOString().substring(0, 10);\n        document.querySelector(\"#endDate\").value = endDate;\n        setEndDate(endDate);\n        document.querySelector(\"#active\").value = campaignData.active;\n        setActive(campaignData.active);\n        if (campaignData.pBnnEmbedCode) document.querySelector(\"#pBnnEmbedCode\").value = campaignData.pBnnEmbedCode;\n        setPBnnEmbedCode(campaignData.pBnnEmbedCode);\n        if (campaignData.pBnnImgLink) document.querySelector(\"#pBnnImgLink\").value = campaignData.pBnnImgLink ;\n        setPBnnImgLink(campaignData.pBnnImgLink);\n        if (campaignData.pBnnImgUrl) document.querySelector(\"#pBnnImgUrl\").value = campaignData.pBnnImgUrl;\n        setPBnnImgUrl(campaignData.pBnnImgUrl);\n        if(campaignData.pEmpresas === \"true\")\n            setPEmpresas(true)\n        if(campaignData.pUsuarios === \"true\")\n            setPUsuarios(true)\n        if(campaignData.pRedes === \"true\")\n            setPRedes(true)\n        if(campaignData.pInst === \"true\")\n            setPInst(true)\n        if(campaignData.app === \"true\")\n            setApp(true)  \n        if (campaignData.updatedAt) {\n            setUpdateAt(1)\n            let updatedAt = new Date(campaignData.updatedAt).toISOString().substring(0, 10);\n            document.querySelector(\"#updatedAt\").value = updatedAt\n        }\n        document.querySelector(\"#title\").value = campaignData.title;\n        setTitle(campaignData.title);             \n        setUserUpdater(nomeUser)   \n        setTimeout(() => {\n            document.querySelector(\"#userCreator\").value = campaignData.userCreator;    \n        }, 1000); \n        \n        }\n    }\n    \n    const updateCampain = async () => {\n        try {\n            const updatedAt = new Date();\n            const headers = {\"x-auth-token\": localStorage.getItem(\"auth-token\") }\n            const dataCampaign = { title, pUsuarios, pEmpresas, pRedes, pInst, app, pBnnImgUrl, pBnnImgLink, pBnnEmbedCode, startDate, endDate, active, userCreator, userUpdater, updatedAt}\n            const updateData = await Axios.patch(`${process.env.REACT_APP_API_URL}/campaigns/update/`+props.id, dataCampaign, {headers: headers})\n            console.log(updateData.data)\n            setLoadingBar(1)\n            setSuccess(\"Campanha atualizada com sucesso!\")\n            setTimeout(() => {\n                setSuccess(0)\n                history.push(\"/\");\n               }, 2500);\n\n        } catch (err) {\n            console.log(\"Error: \", err)\n        }\n    }\n\n    useEffect(() => {\n        if(props.id)\n            getCampaign();\n            setTimeout(() => {\n                console.log(campaignData)\n                fillFields(campaignData)\n            }, 1000);\n    }, [])\n    \n    const createCampaign = async (e) => {\n        e.preventDefault();\n\n        if(pBnnEmbedCode)\n            pBnnEmbedCode.replace(/\"/g, \"'\")\n\n        let checkBoxes = document.getElementsByClassName( 'check' );\n        let nbChecked = 0;\n        for (let i = 0; i < checkBoxes.length; i++) {\n            if ( checkBoxes[i].checked ) {\n                nbChecked++;\n            };\n        };\n\n        if(nbChecked === 0){\n            setError(\"Selecione ao menos um destino para veiculação do banner\");\n            return false;\n        }\n\n        try {\n           console.log('entrou') \n           const newCampaign = { title, pUsuarios, pEmpresas, pRedes, pInst, app, pBnnImgUrl, pBnnImgLink, pBnnEmbedCode, startDate, endDate, active, userCreator}\n           const headers = {\"x-auth-token\": localStorage.getItem(\"auth-token\") }\n           await Axios.post(`${process.env.REACT_APP_API_URL}/campaigns`, newCampaign, {headers: headers}); \n           setLoadingBar(1)\n           setSuccess(0)\n           setSuccess(\"Cadastro da campanha realizado com sucesso!\")\n           setTimeout(() => {\n            history.push(\"/\");\n           }, 2500);\n        } catch (err) {\n            setLoadingBar(0)\n            err.response.data.msg && setError(err.response.data.msg)            \n        }\n    }\n\n    return (\n        <React.Fragment>\n            {loadingBar === 1 && (<Loading style={{height: '146%!important', bottom: '-1500px!important' }} />)}\n            {error && (\n                <ErrorNotice message={error} clearError={() => setError(undefined)} />\n            )}\n            {success && ( \n                <SuccessNotice message={success} clearError={() => setError(undefined)} style={{position: 'fixed!important'}} />\n            )}\n            <Container fluid style={{marginTop: '15px', marginBottom: '15px'}}>\n                \n                <BreadCrump page={(props.id) ? \"Editar Campanha\" : 'Criar Campanha'}/>\n            </Container>    \n            <Container fluid >\n                <Notification className=\"table__mobile\">\n                <div className=\"columns\">\n                <div className=\"column is-four-fifths\">\n   \n                        <div className=\"box is-white\">   \n                        <div className=\"field\">\n                            <label className=\"label\">Título</label>\n                            <div className=\"control\">\n                                <input id=\"title\" name=\"title\" className=\"input is-primary\" type=\"text\" placeholder=\"Digite o título da campanha\" onChange={(e) => setTitle(e.target.value)} />\n                            </div>\n                        </div>\n                        </div> \n        \n\n       \n                    <div className=\"box is-white\">   \n                        <div className=\"field\">\n                            <label className=\"label\">Portais e App</label>\n                            <div className=\"is-divider\" data-content=\"Selecione os destinos para veiculação do banner.\"></div>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                <label className=\"checkbox\">\n                                    <input type=\"checkbox\" id=\"pUsuarios\" className=\"check\" name=\"pUsuarios\" checked={pUsuarios} onChange={() => setPUsuarios(!pUsuarios)} /> Portal Usuários\n                                </label>\n                                </div>\n                                <div className=\"column\">\n                                <label className=\"checkbox\">\n                                    <input type=\"checkbox\" id=\"pEmpresas\" className=\"check\" name=\"pEmpresas\" checked={pEmpresas} onChange={() => setPEmpresas(!pEmpresas)} /> Portal Empresas\n                                </label>\n                                </div>\n                                <div className=\"column\">\n                                <label className=\"checkbox\">\n                                    <input type=\"checkbox\" id=\"pRedes\" className=\"check\" name=\"pRedes\" checked={pRedes} onChange={() => setPRedes(!pRedes)} /> Portal Redes\n                                </label>\n                                </div>\n                                <div className=\"column\">\n                                <label className=\"checkbox\">\n                                    <input type=\"checkbox\" id=\"pInst\" className=\"check\" name=\"pInst\" checked={pInst} onChange={() => setPInst(!pInst)} /> Site Institucional\n                                </label>\n                                </div>\n                                <div className=\"column\">\n                                <label className=\"checkbox\">\n                                    <input type=\"checkbox\" id=\"app\" className=\"check\" name=\"app\" checked={app} onChange={() => setApp(!app)} /> APP\n                                </label>\n                                </div>\n                                \n                                \n                            </div>\n                            <div className=\"is-divider\" data-content=\"Dados para os Portais e APP\"></div>\n                            <div className=\"is-divider is-divider-p\" data-content=\"Opção 1 - URL da imagem e link destino para o banner\"></div>\n                        </div>\n                    \n                        <div className=\"field\">\n                            <label className=\"label\">Url da imagem</label>\n                            <div className=\"control\">\n                                <input id=\"pBnnImgUrl\" name=\"pBnnImgUrl\" className=\"input is-primary\" type=\"text\" placeholder=\"http://...\" onChange={(e) => setPBnnImgUrl(e.target.value)} />\n                            </div>\n                        </div>\n\n                        <div className=\"field\">\n                            <label className=\"label\">Link de destino do banner</label>\n                            <div className=\"control\">\n                                <input id=\"pBnnImgLink\" name=\"pBnnImgLink\" className=\"input is-primary\" type=\"text\" placeholder=\"http://...\" onChange={(e) => setPBnnImgLink(e.target.value)} />\n                            </div>\n                        </div>\n\n                        <div className=\"is-divider is-divider-p\" data-content=\"Opção 2 - EmbedCode Javascript do App BannerSnack \"></div>\n\n                        <div className=\"field\">\n                            <label className=\"label\">BannerSnack - Embed Code</label>\n                            <div className=\"control\">\n                                <textarea className=\"textarea is-primary is-rounded\" id=\"pBnnEmbedCode\" name=\"pBnnEmbedCode\" placeholder=\"Cole o embed code (javascript) aqui\" onChange={(e) => setPBnnEmbedCode(e.target.value)}></textarea>\n                            </div>\n                        </div>\n\n                        \n\n\n                    </div>\n                    \n              \n\n                    <div className=\"box is-white\">   \n                        <div className=\"field\">\n                            <label className=\"label\">Datas Inicial e Final / Ativação</label>\n                            <div className=\"is-divider\" data-content=\"Escolha a Data inicial e final de publicação.\"></div>\n                            <div className=\"columns\">\n                                <div className=\"column\">\n                                <div className=\"field\">\n                                    <label className=\"label\">Data Inicial</label>\n                                    <div className=\"control\">\n                                        <input id=\"startDate\" name=\"startDate\" className=\"input is-primary\" type=\"date\" onChange={(e) => setStartDate(e.target.value)} />\n                                    </div>\n                                </div>\n                                </div>\n                                <div className=\"column\">\n                                    <div className=\"field\">\n                                        <label className=\"label\">Data Final</label>\n                                        <div className=\"control\">\n                                            <input id=\"endDate\" name=\"endDate\" className=\"input is-primary\" type=\"date\" onChange={(e) => setEndDate(e.target.value)} />\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"column\">\n                                    <div className=\"field\">\n                                    <label className=\"label\">Ativar Banner</label>\n                                        <div className=\"select is-rounded is-primary\">\n                                            <select id=\"active\" name=\"active\" style={{width: '180px!important'}} onChange={(e) => setActive(e.target.value)}>\n                                                <option value=\"\">Selecione uma opção abaixo</option>\n                                                <option value=\"S\">Sim           </option>\n                                                <option value=\"N\">Não           </option>\n                                            </select>\n                                        </div>\n                                    </div>    \n                                </div>\n                            </div>\n                           \n                        </div>\n                    \n                        <div className=\"columns\">\n                            <div className=\"column is-one-third\"> \n                                <div className=\"field\">\n                                    <label className=\"label\">Usuário criador da campanha</label>\n                                    <div className=\"control\">\n                                        <input id=\"userCreator\" name=\"userCreator\" className=\"input\" type=\"text\" disabled value={(props.id) ? ('') : ( nomeUser)}/>\n                                    </div>\n                                </div>\n                            </div>\n                                \n                        </div>\n                        {(props.id) ? (  \n                        <div className=\"columns\">\n                            <div className=\"column is-two-fifths\"> \n                                <div className=\"field\">\n                                    <label className=\"label\">Usuário responsável pela alteração</label>\n                                    <div className=\"control\">\n                                        <input id=\"userUpdater\" name=\"userUpdater\" className=\"input\" type=\"text\" disabled value={nomeUser}/>\n                                    </div>\n                                </div>\n                            </div>\n                            {(updateAt === 1) ? (  \n                                <div className=\"column is-two-fifths\"> \n                                    <div className=\"field\">\n                                        <label className=\"label\">Data da última alteração</label>\n                                        <div className=\"control\">\n                                            <input id=\"updatedAt\" name=\"updatedAt\" className=\"input\" type=\"date\" disabled />\n                                        </div>\n                                    </div>\n                                </div>          \n                            ) : ('')}     \n                        </div>\n                        ) : ('')}\n                        \n\n                    </div> \n\n                \n                </div>\n                <div className=\"column\">\n                <div className=\"box is-white\"> \n                    <h2 className=\"title is-4\">Informações</h2>\n                    <div className=\"block\">Preencha os campos para criar uma campanha.</div>\n                    <div className=\"block\">Selecione a data inicial e final da veiculação do banner e também em quais Portais e App ele deve ser visualizados.</div>\n                    <div className=\"block\">Escolha uma das formas para cadastrar o arquivo do banner, ou via url da imagem junto com link ou o embed code javascript da aplicação <a href=\"https://app.bannersnack.com/\" target=\"_blank\" rel=\"noreferrer\"><strong>BannerSnack</strong></a>, no caso do embed não é necessário o link de destino do banner.</div>\n                </div>\n                </div>\n                </div>\n\n\n                <div className=\"columns is-centered\">\n                <div className=\"column is-four-fifths has-text-centered\">\n                {(props.id) ? (     \n                    <button className=\"button is-primary is-large is-rounded is-outlined\" onClick={updateCampain}>\n                        <span className=\"icon is-small is-left\">\n                        <i className=\"fas fa-cloud-upload-alt\"></i>\n                        </span>\n                        Editar campanha\n                    </button>\n                ) : (\n                    <button className=\"button is-primary is-large is-rounded is-outlined\" onClick={createCampaign}>\n                    <span className=\"icon is-small is-left\">\n                    <i className=\"fas fa-cloud-upload-alt\"></i>\n                    </span>\n                     Cadastrar campanha\n                    </button>\n                )}\n                \n                \n                </div>\n                <div className=\"column\"></div>\n                </div>\n                \n                </Notification>\n                \n\n            </Container>\n        </React.Fragment>        \n    )\n}",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"104","replacedBy":"108"},{"ruleId":"106","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"114","line":1,"column":27,"nodeType":"112","messageId":"113","endLine":1,"endColumn":36},{"ruleId":"110","severity":1,"message":"115","line":2,"column":8,"nodeType":"112","messageId":"113","endLine":2,"endColumn":13},{"ruleId":"110","severity":1,"message":"116","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":18},{"ruleId":"110","severity":1,"message":"117","line":5,"column":9,"nodeType":"112","messageId":"113","endLine":5,"endColumn":19},{"ruleId":"110","severity":1,"message":"118","line":6,"column":9,"nodeType":"112","messageId":"113","endLine":6,"endColumn":18},{"ruleId":"110","severity":1,"message":"119","line":6,"column":20,"nodeType":"112","messageId":"113","endLine":6,"endColumn":32},{"ruleId":"110","severity":1,"message":"120","line":6,"column":34,"nodeType":"112","messageId":"113","endLine":6,"endColumn":39},{"ruleId":"110","severity":1,"message":"121","line":6,"column":41,"nodeType":"112","messageId":"113","endLine":6,"endColumn":47},{"ruleId":"110","severity":1,"message":"122","line":7,"column":8,"nodeType":"112","messageId":"113","endLine":7,"endColumn":13},{"ruleId":"110","severity":1,"message":"123","line":9,"column":8,"nodeType":"112","messageId":"113","endLine":9,"endColumn":14},{"ruleId":"110","severity":1,"message":"124","line":28,"column":12,"nodeType":"112","messageId":"113","endLine":28,"endColumn":14},{"ruleId":"110","severity":1,"message":"125","line":28,"column":16,"nodeType":"112","messageId":"113","endLine":28,"endColumn":21},{"ruleId":"110","severity":1,"message":"126","line":46,"column":12,"nodeType":"112","messageId":"113","endLine":46,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":134,"column":8,"nodeType":"129","endLine":134,"endColumn":10,"suggestions":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],["131"],["132"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Axios' is defined but never used.","'BreadCrump' is defined but never used.","'useHistory' is defined but never used.","'Container' is defined but never used.","'Notification' is defined but never used.","'Table' is defined but never used.","'Button' is defined but never used.","'axios' is defined but never used.","'Moment' is defined but never used.","'id' is assigned a value but never used.","'setId' is assigned a value but never used.","'campaign' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'campaignData', 'fillFields', 'getCampaign', and 'props.id'. Either include them or remove the dependency array.","ArrayExpression",["133"],"no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},"Update the dependencies array to be: [campaignData, fillFields, getCampaign, props.id]",{"range":"136","text":"137"},[5322,5324],"[campaignData, fillFields, getCampaign, props.id]"]